* Figure out a way to pass configuration to workers
* Give the workers an id, starting from 1, and total worker count?
* generalize epw to another module to share code with eg!
* Create a raw event generator which is spawed with a {M,F,A} and then
  it is on its own (possibly supervised via a supervisor_bridge)
* Route messages in epc to workers for
  * Hash on key X
  * one worker per key, create workers dynamically when needed
* Add loop detection when verifying the topology
* add possibility for worker to give ets table to epc, requires the
  epc to be passed as an argument in init
* Add infinity to all gen_server:calls
* catch errors from the epw behaviour implementations?
* Extract the common code from the sup tests
* flaky test:
  epa_master_tests: valid_topology_terget_ref_type_test...*failed*
  ::error:{assertMatch_failed,
            [{module,epa_master_tests},
             {line,163},
             {expression,"epa_master : start_link ( ValidTargetRefType2 )"},
             {expected,"{ ok , _Pid }"},
             {value,{error,{already_started,<0.875.0>}}}]}
    in function epa_master_tests:'-valid_topology_terget_ref_type_test/0-fun-1-'/0
    in call from epa_master_tests:valid_topology_terget_ref_type_test/0
* Stub epw_sup in epc_tests
* write simple epw:s that do useful work
* Make the epw and eg behaviour handle code_change
* Give the worker the possibility to change the timeout? (at end of file?)
* create a new module for the syntax checks