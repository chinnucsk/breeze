NEW:

HIGH:
* Create one or two sample apps
* move worker config to the start of the epc (to work with dynamic workers)
  * should set callbackArgs in dynamically started workers
* Add new epc:s dynamically, to allow for a process monitoring a
  directory for new files, then start a new producer for each new file
  created in that directory. (more work to handle epw than eg)
  * Dynamically add/remove targets in a epc
* Make it possible to stop epc:s dynamically
* write simple epw:s that do useful work
* handle the simple_one_for_one workers (they do not die in sync with its sup)
  * start to use supervisor2 from rabbitmq-server
* Consistent naming of WorkerConfig - CallbackConfig

MEDIUM:
* improve performance for dynamic workers, a list might not be so good for 1000s
  of workers
* add possibility for worker to give ets table to epc, requires the
  epc to be passed as an argument in init
* restrict the producers if the consumers can't cope with the load
* Add possibility to reset all the workers, to start fresh without restarting all
* generalize epw to another module to share code with eg!
* Give the workers an id, starting from 1, and total worker count?
* Add infinity to all gen_server:calls
* check message queue size, have a way to report it
* add checks for unsupported options in config_validator
* remove WorkerMod from epc and make the WorkerMods into behavior or at least
  force then to handle sync events, but what about the casting?
* Garbage collect dynamic workers (with empty state)?

LOW:
* Route messages in epc to workers for
  * Hash on key X
* Create a raw event generator which is spawned with a {M,F,A} and then
  it is on its own (possibly supervised via a supervisor_bridge)
* Add loop detection when verifying the topology
* catch errors from the epw behaviour implementations?
* Extract the common code from the sup tests
* flaky test:
  * epa_master_tests: valid_topology_terget_ref_type_test...*failed*
    ::error:{assertMatch_failed,
              [{module,epa_master_tests},
               {line,163},
               {expression,"epa_master : start_link ( ValidTargetRefType2 )"},
               {expected,"{ ok , _Pid }"},
               {value,{error,{already_started,<0.875.0>}}}]}
      in function epa_master_tests:'-valid_topology_terget_ref_type_test/0-fun-1-'/0
      in call from epa_master_tests:valid_topology_terget_ref_type_test/0

  * epc_tests: t_dynamic_workers_should_be_restarted_if_they_crash...*failed*
    ::error:{assertEqual_failed,
              [{module,epc_tests},
               {line,232},
               {expression,
                   "meck : num_calls ( WorkerMod , process , [ NewWorker , Msg1 ] )"},
               {expected,1},
               {value,0}]}
      in function epc_tests:'-t_dynamic_workers_should_be_restarted_if_they_crash/1-fun-1-'/3
      in call from epc_tests:t_dynamic_workers_should_be_restarted_if_they_crash/1
* Stub epw_sup in epc_tests
* Make the epw and eg behaviour handle code_change
* Give the worker the possibility to change the timeout? (at end of file?)
